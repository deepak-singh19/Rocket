name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  MONGODB_URI: 'mongodb://localhost:27017/canvas-studio-ci'

jobs:
  # Comprehensive Testing
  test-matrix:
    name: Test Matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18', '20']
        workspace: [client, server]
        include:
          - node-version: '18'
            workspace: 'client'
            test-type: 'unit'
          - node-version: '18'
            workspace: 'server'
            test-type: 'unit'
          - node-version: '20'
            workspace: 'client'
            test-type: 'unit'
          - node-version: '20'
            workspace: 'server'
            test-type: 'unit'
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install workspace dependencies
        run: npm install --workspace=${{ matrix.workspace }}

      - name: Wait for MongoDB
        if: matrix.workspace == 'server'
        run: |
          timeout 60 bash -c 'until mongosh --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 2; done'

      - name: Run linting
        run: npm run lint --workspace=${{ matrix.workspace }}

      - name: Run type checking
        run: npm run build --workspace=${{ matrix.workspace }}

      - name: Run unit tests
        run: npm run test --workspace=${{ matrix.workspace }}
        env:
          MONGODB_URI: ${{ env.MONGODB_URI }}

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./${{ matrix.workspace }}/coverage/lcov.info
          flags: ${{ matrix.workspace }}-${{ matrix.node-version }}
          name: ${{ matrix.workspace }}-coverage-${{ matrix.node-version }}

  # E2E Tests on Multiple Browsers
  e2e-matrix:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test-matrix
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install workspace dependencies
        run: npm install --workspace=client --workspace=server

      - name: Wait for MongoDB
        run: |
          timeout 60 bash -c 'until mongosh --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 2; done'

      - name: Seed test data
        run: npm run seed:users --workspace=server
        env:
          MONGODB_URI: ${{ env.MONGODB_URI }}

      - name: Build applications
        run: |
          npm run build --workspace=server
          npm run build --workspace=client

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Run Playwright E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        working-directory: client
        env:
          MONGODB_URI: ${{ env.MONGODB_URI }}
          API_BASE_URL: http://localhost:4000
          CLIENT_BASE_URL: http://localhost:5173

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: client/playwright-report/
          retention-days: 30

  # Security and Dependency Checks
  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run security audit for workspaces
        run: |
          npm audit --workspace=client --audit-level=moderate
          npm audit --workspace=server --audit-level=moderate

      - name: Check for known vulnerabilities
        run: |
          npm audit --audit-level=high --json > audit-results.json
          if [ $(cat audit-results.json | jq '.metadata.vulnerabilities.high') -gt 0 ]; then
            echo "High severity vulnerabilities found!"
            cat audit-results.json | jq '.vulnerabilities'
            exit 1
          fi

      - name: Upload security audit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 30

  # Performance Benchmarks
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install workspace dependencies
        run: npm install --workspace=server

      - name: Wait for MongoDB
        run: |
          timeout 60 bash -c 'until mongosh --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 2; done'

      - name: Seed test data
        run: npm run seed:users --workspace=server
        env:
          MONGODB_URI: ${{ env.MONGODB_URI }}

      - name: Build server
        run: npm run build --workspace=server

      - name: Start server
        run: |
          cd server
          npm start &
          sleep 10
        env:
          MONGODB_URI: ${{ env.MONGODB_URI }}
          PORT: 4000

      - name: Run performance benchmarks
        run: npm run test:performance --workspace=server
        env:
          API_BASE_URL: http://localhost:4000

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-benchmarks
          path: server/performance-results/
          retention-days: 90

  # Dependency Updates Check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated packages
        run: |
          echo "## ðŸ“¦ Dependency Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Root Dependencies" >> $GITHUB_STEP_SUMMARY
          npm outdated --json > root-outdated.json || true
          if [ -s root-outdated.json ]; then
            echo "| Package | Current | Latest |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|---------|--------|" >> $GITHUB_STEP_SUMMARY
            cat root-outdated.json | jq -r 'to_entries[] | "| \(.key) | \(.value.current) | \(.value.latest) |"' >> $GITHUB_STEP_SUMMARY
          else
            echo "âœ… All root dependencies are up to date" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Client Dependencies" >> $GITHUB_STEP_SUMMARY
          npm outdated --workspace=client --json > client-outdated.json || true
          if [ -s client-outdated.json ]; then
            echo "| Package | Current | Latest |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|---------|--------|" >> $GITHUB_STEP_SUMMARY
            cat client-outdated.json | jq -r 'to_entries[] | "| \(.key) | \(.value.current) | \(.value.latest) |"' >> $GITHUB_STEP_SUMMARY
          else
            echo "âœ… All client dependencies are up to date" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Server Dependencies" >> $GITHUB_STEP_SUMMARY
          npm outdated --workspace=server --json > server-outdated.json || true
          if [ -s server-outdated.json ]; then
            echo "| Package | Current | Latest |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|---------|--------|" >> $GITHUB_STEP_SUMMARY
            cat server-outdated.json | jq -r 'to_entries[] | "| \(.key) | \(.value.current) | \(.value.latest) |"' >> $GITHUB_STEP_SUMMARY
          else
            echo "âœ… All server dependencies are up to date" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload dependency check results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-check-results
          path: |
            root-outdated.json
            client-outdated.json
            server-outdated.json
          retention-days: 30

  # Build and Deploy Preview
  build-preview:
    name: Build Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build client
        run: npm run build --workspace=client

      - name: Build server
        run: npm run build --workspace=server

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: production-build
          path: |
            client/dist/
            server/dist/
          retention-days: 30

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r client/dist deployment/client
          cp -r server/dist deployment/server
          cp server/package.json deployment/server/
          cp -r server/node_modules deployment/server/ || true
          tar -czf deployment.tar.gz deployment/

      - name: Upload deployment package
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: deployment.tar.gz
          retention-days: 30
