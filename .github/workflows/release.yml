name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  NODE_VERSION: '18'
  REGISTRY: 'ghcr.io'
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install workspace dependencies
        run: npm install --workspace=client --workspace=server

      - name: Wait for MongoDB
        run: |
          timeout 60 bash -c 'until mongosh --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 2; done'

      - name: Run linting
        run: |
          npm run lint --workspace=client
          npm run lint --workspace=server

      - name: Run type checking
        run: |
          npm run build --workspace=client
          npm run build --workspace=server

      - name: Run unit tests
        run: |
          npm run test --workspace=client
          npm run test --workspace=server
        env:
          MONGODB_URI: mongodb://localhost:27017/canvas-studio-test

      - name: Seed test data
        run: npm run seed:users --workspace=server
        env:
          MONGODB_URI: mongodb://localhost:27017/canvas-studio-test

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e --workspace=client
        env:
          MONGODB_URI: mongodb://localhost:27017/canvas-studio-test
          API_BASE_URL: http://localhost:4000
          CLIENT_BASE_URL: http://localhost:5173

  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-test
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1)
            COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" --max-count=20)
          fi
          
          echo "## 🚀 Release ${{ steps.get_version.outputs.version }}" >> changelog.md
          echo "" >> changelog.md
          echo "### 📝 Changes" >> changelog.md
          echo "$COMMITS" >> changelog.md
          echo "" >> changelog.md
          echo "### 🔧 Technical Details" >> changelog.md
          echo "- Built with Node.js ${{ env.NODE_VERSION }}" >> changelog.md
          echo "- Tested across multiple browsers" >> changelog.md
          echo "- Full test coverage including E2E tests" >> changelog.md
          echo "- Security audit passed" >> changelog.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, 'alpha') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'rc') }}

  # Build Production Artifacts
  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build client
        run: npm run build --workspace=client

      - name: Build server
        run: npm run build --workspace=server

      - name: Create deployment package
        run: |
          mkdir -p release-package
          
          # Copy client build
          cp -r client/dist release-package/client
          
          # Copy server build
          cp -r server/dist release-package/server
          cp server/package.json release-package/server/
          
          # Create production package.json
          cat > release-package/package.json << EOF
          {
            "name": "canvas-studio",
            "version": "${{ github.ref_name }}",
            "description": "Canvas Studio - Collaborative Design Platform",
            "main": "server/index.js",
            "scripts": {
              "start": "node server/index.js",
              "start:client": "serve client -s -l 3000",
              "start:server": "node server/index.js"
            },
            "dependencies": {
              "serve": "^14.2.1"
            },
            "engines": {
              "node": ">=18.0.0"
            }
          }
          EOF
          
          # Create README
          cat > release-package/README.md << EOF
          # Canvas Studio ${{ github.ref_name }}
          
          ## Quick Start
          
          1. Install dependencies:
             \`\`\`bash
             npm install
             \`\`\`
          
          2. Set environment variables:
             \`\`\`bash
             export MONGODB_URI="mongodb://localhost:27017/canvas-studio"
             export PORT=4000
             \`\`\`
          
          3. Start the server:
             \`\`\`bash
             npm start
             \`\`\`
          
          4. In another terminal, start the client:
             \`\`\`bash
             npm run start:client
             \`\`\`
          
          5. Open http://localhost:3000 in your browser
          
          ## Production Deployment
          
          See the main repository documentation for detailed deployment instructions.
          EOF
          
          # Create archive
          tar -czf canvas-studio-${{ github.ref_name }}.tar.gz release-package/
          zip -r canvas-studio-${{ github.ref_name }}.zip release-package/

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./canvas-studio-${{ github.ref_name }}.tar.gz
          asset_name: canvas-studio-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Assets (ZIP)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./canvas-studio-${{ github.ref_name }}.zip
          asset_name: canvas-studio-${{ github.ref_name }}.zip
          asset_content_type: application/zip

  # Docker Build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Notify Release
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-artifacts, docker-build]
    if: always()
    
    steps:
      - name: Notify Success
        if: needs.create-release.result == 'success'
        run: |
          echo "## 🎉 Release ${{ github.ref_name }} Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Artifacts Created:" >> $GITHUB_STEP_SUMMARY
          echo "- Source code archive (tar.gz)" >> $GITHUB_STEP_SUMMARY
          echo "- Source code archive (zip)" >> $GITHUB_STEP_SUMMARY
          echo "- Docker image: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links:" >> $GITHUB_STEP_SUMMARY
          echo "- [Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Docker Image](https://github.com/${{ github.repository }}/pkgs/container/${{ env.IMAGE_NAME }})" >> $GITHUB_STEP_SUMMARY

      - name: Notify Failure
        if: needs.create-release.result == 'failure'
        run: |
          echo "## ❌ Release ${{ github.ref_name }} Failed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
